buildscript {
	ext {
		springBootVersion = '2.0.0.RELEASE'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath "com.commercehub.gradle.plugin:gradle-avro-plugin:0.7.0"
	}
}


apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
checkstyle {
	toolVersion '7.8.1'
	configFile file("config/checkstyle/checkstyle.xml")
}
checkstyleMain {
	source ='src/main/java'
}
checkstyleTest {
	source ='src/test/java'
}

apply plugin: 'findbugs'
findbugs {
	ignoreFailures = false
	toolVersion = "3.0.1"
	sourceSets=[sourceSets.main]
	excludeFilter = file("config/findbugs/excludeFilter.xml")
	reportsDir = file("$project.buildDir/reports/findbugs")
	effort = "max"
}
tasks.withType(FindBugs) {
	reports {
		xml.enabled false
		html.enabled true
		html.stylesheet resources.text.fromFile('config/xsl/findbugs-custom.xsl')
	}
}

apply plugin: "jacoco"
jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.destination "${buildDir}/jacocoHtml"
	}
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "com.commercehub.gradle.plugin.avro-base"


group = 'com.carlospatinos'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

def generatedSourcesPath = "${projectDir.absolutePath}/target/generated-sources/"

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

bootJar {
	baseName = 'carlospatinos-salesforce-connector'
	version =  '0.1.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
	main {
		java {
			srcDir "${generatedSourcesPath}"
		}
	}
}


dependencies {

	compile("org.springframework.boot:spring-boot-starter-web")
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	//implementation('org.springframework.boot:spring-boot-starter-security')
	//testImplementation('org.springframework.security:spring-security-test')

	implementation('org.springframework.kafka:spring-kafka')
	testCompile('org.springframework.kafka:spring-kafka-test')
	//compile ('org.apache.kafka:kafka_2.11:2.0.0')


	//testCompile('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.boot:spring-boot-starter-test')

	compile('org.apache.avro:avro:1.8.2')
}

idea {
	module {
		generatedSourceDirs += file("${generatedSourcesPath}")
	}

}


task generateAvro(type: com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask) {
	print "Generated in: ${generatedSourcesPath}"
	source("src/main/resources/avro")
	outputDir = file("${generatedSourcesPath}")
}

task createPom << {
	pom {
		project {
			groupId 'com.carlospatinos'
			artifactId 'salesforceconnector'
			version '1.0.0'

			inceptionYear '2008'
			licenses {
				license {
					name 'The Apache Software License, Version 2.0'
					url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					distribution 'repo'
				}
			}
		}
	}.writeTo("pom.xml")
}

compileJava.source(generateAvro.outputs)
